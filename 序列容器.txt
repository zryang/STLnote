array<T,N> 长度固定的序列，N个T类型元素，不可增加或删除
vector<T> 可变长序列，可增删，但是只能在尾部高效增删
deque<T> 可变长序列，首尾都可增删
list<T> 任何地方都可高效增删，访问速度较慢，双向链表
forward list<T> 可变长单向链表，只能从第一个元素开始访问

函数：array vector deque
begin,end,rbegin,rend,cbegin,cend,crbegin,crend
assign 用新元素替换原有内容
operator= 复制，或者用来初始化列表
size
max_size
capacity 当前容量
empty
resize 改变实际元素个数
shrink_to_fit 将内存减少到等于当前元素实际所使用的大小
front 返回第一个元素的引用
back 返回最后一个元素的引用
operator[] 下标取元素
at 经过边界检查的取元素
push_back 尾部增加一个元素
inert 在指定位置插入一个或多个
emplace 在指定位置直接生成一个元素
emplace_back 在尾部生成一个元素
pop_back 移出尾部元素
erase 移除一个或一段
clear 清空序列
swap 交换2个容器的所有元素
data 返回包含元素的内部数组的指针

list和forward_list
before_begin 第一个元素前一个位置的迭代器
cbefore_begin 第一个元素前一个位置的const迭代器
cend 返回const反向结束迭代器
front 返回第一个元素的引用
back 返回最后一个元素的引用
push_back 尾部插入
push_front 头部插入
emplace 在指定位置直接生成一个元素
emplace_after 指定位置后面直接生成一个元素
emplace_back 序列尾部生成一个元素
emplace_front 序列头部直接生成一个元素
insert 指定位置插入一个或多个
insert_after 指定位置后面插入一个或多个
pop_back 移除尾部元素
pop_front 移除头部元素
reverse 反向元素顺序
erase 移除元素一个或多个
erase_after 移除指定位的一个或多个
remove 移除和参数匹配的元素
remote_if 移除满足一元函数的所有元素
unique 移除所有重复的元素
sort 排序
merge 合并2个有序容器
splice 移动指定位置前面的所有元素到另一个同类型list中，切片
splice_after 切片，取后面的


array
std::array<double,100> data;//声明
std::array<double, 100> data {};//初始化
std::array<double, 10> values {0.5, 1.0, 1.5, 2.0};//列表初始化
values.fill(3.1415926);//将array所有值设为给定值

容器都可以使用迭代器
for(auto&& value : value)
std::get<6>(words)//get提供一种不需要在运行时检查，但能用安全的索引值访问元素的方式
迭代器解引用*it之后可以获得直接的值
auto it = arr.begin(); auto的使用场景
auto it = std::begin(arr);另一个获得迭代器的方法
无法通过迭代器来得到容器本身的信息
可以通过迭代器来实现一些算法












