C语言中，已存在部分字符串处理函数：
 strcpy()，sprintf() , stoi()等
 C的字符串处理：string.h

 memchr: 主要用来寻找字符串中特定字符的位置，返回的指针可认为是后半段的内容
 memcmp:比较2块内存地址前n个内容大小
 memcpy:复制str2的前n个字符到str1，可自定义从哪里开始复制
 memmove:能防止踩内存的memcpy，用法一样
 memset:将str的前n个位置初始化为ch，或者覆写前n个内容
 strcat:字符串拼接，desc=desc+src
 strncat:字符串拼接，只取src的前n个字符
 strchr:查找ch第一次出现的位置，返回后半段内容
 strcmp:比较2个字符串的大小
 strncmp:比较2个字符串前n个字符的大小
 strcoll:比较2个字符串大小，会读取环境变量LC_COLLATE（字符集）
 strcpy:复制str2到str1
 strncpy:复制str2的前n个字符到str1，剩余部分用空字节填充
 strcspn:检索字符串 str1 开头连续有几个字符都不含字符串 str2 中的字符
 strerror:错误码->错误信息
 strlen:str的长度，不包含\0
 strpbrk:检索字符串 str1 中第一个匹配字符串 str2 中字符的字符，不包含空结束字符,类似于strcspn
 strrchr:str中最后一次出现ch的位置，即反向搜索
 strspn:检索字符串 str1 中第一个不在字符串 str2 中出现的字符下标
 strstr:搜索子串str2的位置
 strtok:以分隔符将字符串分割成子串
 strxfrm:以LC_COLLATE来转换字符串的前n个内容

 str -- 指向要执行搜索的内存块。
 c -- 以 int 形式传递的值，但是函数在每次字节搜索时是使用该值的无符号字符形式。
 n -- 要被分析的字节数。
 在参数 str 所指向的字符串的前 n 个字节中搜索第一次出现字符 c（一个无符号字符）的位置。
 void *memchr(const void *str, int c, size_t n)
 返回指向匹配字节的指针，或NULL


int main () {
    const char str[] = "hello";//C中定义str的方法
    const char ch = 'e';
    char *ret;
    ret = (char*)memchr(str, ch, strlen(str));
    printf("%s\n", ret);//ello
}

str1 -- 指向内存块的指针。
str2 -- 指向内存块的指针。
n -- 要被比较的字节数。
返回str2-str1，小写字母在前面，指定长度
int memcmp(const void *str1, const void *str2, size_t n)


str1 -- 指向用于存储复制内容的目标数组，类型强制转换为 void* 指针。
str2 -- 指向要复制的数据源，类型强制转换为 void* 指针。
n -- 要被复制的字节数。
返回一个指向目标存储区 str1 的指针。  str1<--str2
要复制完整的内容，需要strlen(src2)+1
void *memcpy(void *str1, const void *str2, size_t n)
用法2 memcpy(d, s+11, 6);// 从第 11 个字符(r)开始复制


str1 -- 指向用于存储复制内容的目标数组，类型强制转换为 void* 指针。
str2 -- 指向要复制的数据源，类型强制转换为 void* 指针。
n -- 要被复制的字节数。
类似于memcpy，更安全，如果源和目标的地址有重叠的话，memmove能防止内存踩踏
void *memmove(void *str1, const void *str2, size_t n)


str -- 指向要填充的内存块。
c -- 要被设置的值。该值以 int 形式传递，但是函数在填充内存块时是使用该值的无符号字符形式。
n -- 要被设置为该值的字节数。
用字符c来填充str的前n个位置，一般用来初始化，也可以用来覆盖密码等
void *memset(void *str, int c, size_t n)


dest -- 指向目标数组，该数组包含了一个 C 字符串，且足够容纳追加后的字符串。
src -- 指向要追加的字符串，该字符串不会覆盖目标字符串。
拼接字符串，desc=desc+src
char *strcat(char *dest, const char *src)


dest -- 指向目标数组，该数组包含了一个 C 字符串，且足够容纳追加后的字符串，包括额外的空字符。
src -- 要追加的字符串。
n -- 要追加的最大字符数。
只取src的前n个字符
char *strncat(char *dest, const char *src, size_t n)


str -- 要被检索的 C 字符串。
c -- 在 str 中要搜索的字符。
查找ch第一次出现的位置，返回后半段内容
char *strchr(const char *str, int c)


str1 -- 要进行比较的第一个字符串。
str2 -- 要进行比较的第二个字符串。
类似于memcmp，strcmp是比较字符，会检查换行等字符，所以会慢一点，如果有换行则会直接返回
memcmp可以用来比较结构体是否相等，指定长度，不考虑字符，只比大小，更快，但是需要定义长度
int strcmp(const char *str1, const char *str2)


str1 -- 要进行比较的第一个字符串。
str2 -- 要进行比较的第二个字符串。
n -- 要比较的最大字符数。
按字符比较，比前n个
int strncmp(const char *str1, const char *str2, size_t n)


str1 -- 要进行比较的第一个字符串。
str2 -- 要进行比较的第二个字符串。
会依环境变量LC_COLLATE所指定的文字排列次序来比较s1和s2 字符串。用得比较少
int strcoll(const char *str1, const char *str2)


dest -- 指向用于存储复制内容的目标数组。
src -- 要复制的字符串。
复制字符串src到desc，如果desc太小，可能会溢出
char *strcpy(char *dest, const char *src)

dest -- 指向用于存储复制内容的目标数组。
src -- 要复制的字符串。
n -- 要从源中复制的字符数。
复制src的n个字符到desc
char *strncpy(char *dest, const char *src, size_t n)


str1 -- 要被检索的 C 字符串。
str2 -- 该字符串包含了要在 str1 中进行匹配的字符列表。
检索字符串 str1 开头连续有几个字符都不含字符串 str2 中的字符。
可用来做正则一类的工作
size_t strcspn(const char *str1, const char *str2)


errnum -- 错误号，通常是 errno。
返回错误码n的具体错误信息，具体映射由编译器和平台决定
char *strerror(int errnum)


str -- 要计算长度的字符串。
计算长度，直到结束，不包含\0
size_t strlen(const char *str)


str1 -- 要被检索的 C 字符串。
str2 -- 该字符串包含了要在 str1 中进行匹配的字符列表。
检索字符串 str1 中第一个匹配字符串 str2 中字符的字符，不包含空结束字符
类似于strcspn
char *strpbrk(const char *str1, const char *str2)


str -- C 字符串。
c -- 要搜索的字符。以 int 形式传递，但是最终会转换回 char 形式。
搜索str中最后一次出现ch的位置，反向搜索
char *strrchr(const char *str, int c)


str1 -- 要被检索的 C 字符串。
str2 -- 该字符串包含了要在 str1 中进行匹配的字符列表。
检索字符串 str1 中第一个不在字符串 str2 中出现的字符下标。
size_t strspn(const char *str1, const char *str2)


haystack -- 要被检索的 C 字符串。
needle -- 在 haystack 字符串内要搜索的小字符串。
在字符串 haystack 中查找第一次出现字符串 needle（不包含空结束字符）的位置，返回子串+后面的内容
char *strstr(const char *haystack, const char *needle)


str -- 要被分解成一组小字符串的字符串。
delim -- 包含分隔符的 C 字符串。
拿出str中的ch，切断str
char *strtok(char *str, const char *delim)


dest -- 指向存储内容的目标数组的指针，如果参数 n 为 0，则它是一个空指针。
src -- 要被转换为当前区域设置的 C 字符串。
n -- 被复制到 str1 的最大字符数。
以LC_COLLATE来转换字符串的前n个内容
size_t strxfrm(char *dest, const char *src, size_t n)